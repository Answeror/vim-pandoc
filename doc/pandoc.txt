*pandoc.txt* 	For Vim version 7.3 	Last change: 2011 Aug 28

Vim Plugin for *pandoc*
=======================

This is a bundle for writing and editing documents in [pandoc][]'s
[extended markdown][]. It provides

-   some settings to make vim a pleasant |pandoc-writing-environment|,
-   |pandoc-syntax-highlighting|, with support for pandoc's extended
     markdown,
-   |pandoc-snippets| for use with [snipMate][],
-   |pandoc-section-folding|,
-   |pandoc-citation-completion|,
-   some simple |pandoc-conversion-functions| and |pandoc-tidying-functions|,
-   a few |pandoc-localleader-mappings|

*pandoc-writing-enviroment*
===========================

The bundle sets the following options, in an effort to provide a pleasant writing environment:

    setlocal linebreak
    setlocal breakat-=*

`linebreak` tells vim to break lines at word boundaries. `breakat-=*`
expands vim's sense of a word boundary to handle markdown `*emphasis*`.

    nnoremap <buffer> j gj
    nnoremap <buffer> k gk
    vnoremap <buffer> j gj
    vnoremap <buffer> k gk

These mappings allow use of j and k to move up and down in the middle of
a soft-wrapped line.

    setlocal display=lastline

If you are using soft-wrapping, this will tell vim to go ahead and
show part of a long line that runs off the bottom of the screen.

    setlocal nojoinspaces

allows you to use CTRL-J to join the next line with the current line
without adding extra unwanted spaces.

    setlocal commentstring=<!--%s-->
    setlocal comments=s:<!--,m:\ \ \ \ ,e:-->

tells vim to use HTML style comments in your markdown files.

*pandoc-hard-wrapping*
----------------------

By default, the bundle assumes that you will be using soft wrapping, and
applies

    setlocal formatoptions=1

If you prefer hard wrapping, set g:pandoc_use_hard_wraps, i.e., put
something like

    let g:pandoc_use_hard_wraps = 1

in your vimrc. When that is set, the bundle instead sets

    setlocal formatoptions=qct

If you also want autoformatting, set g:pandoc_auto_format:

    let g:pandoc_auto_format = 1

in your vimrc. (Note that autoformatting can slow things down.)

*pandoc-syntax-highlighting*
============================

The syntax highlighting should be fairly accurate and complete. By
default, the bundle tries to be smart, and only highlight implicit links
if there is a matching link definition. This can be expensive on large
files and slow things down. To disable it, set
g:pandoc_no_empty_implicits:

    let g:pandoc_no_empty_implicits = 1

*pandoc-snippets*
=================

If you use snipMate, take a look at snippets/pandoc.snippets to see what
is available. One nice example: at the start of a document, type
`%%<TAB>` to generate a title block, with the filename as title, the
value of `g:snips-author` as author, and the current date.

*pandoc-section-folding*
========================

The bundle tells vim to fold documents by section. If you haven't used
folding before, see |fold-commands|. When used with [FoldList][] this
also provides a handy navigable outline view of your document.

But folding can slow things down. To disable it, set
g:pandoc_no_folding:

    let g:pandoc_no_folding = 1

*pandoc-citation-completion*
============================

If you have a bibtex file (or a symlink to a bibtex file) named
'default.bib' in one of these folders,

    ~/.pandoc
    ~/Library/texmf/bibtex/bib
    ~/texmf/bibtex/bib

then the plugin will automatically use that file for citation
completion. Or, set g:pandoc_bibfile:

    let g:pandoc_bibfile = '/the/path/to/your/bibtex/file.bib'

to use your preferred file.

To use completion, start typing a citekey, e.g.,

    @geac

and then, while still in insert mode, hit CTRL-X CTRL-O (vim's shortcut
for omnicompletion), and you'll get a popup window with a list of
matching keys, e.g.,

    @geach1970
    @geach1972

Regular expressions work too:

    @le.*90

should suggest both '@leftow1990' and '@lewis1990', assuming those are
both keys in your bibliography.

The plugin also provides support for using this with [SuperTab][]. You
will want something like this in your vimrc: 

    let g:SuperTabDefaultCompletionType = "context"

Then you can just hit TAB in the middle of typing a citation
to complete the citation.

> **KNOWN BUGS**:
>
> -   SuperTab completion of citations only works after you use ctrl-x
>     ctrl-o completion once within a given file.
> -   Regular expressions don't work when using SuperTab.

> **TODO**: pandoc.vim should be smarter about finding bibliography
> files. This includes:
>
> -   borrowing settings from latex plugins, if present
> -   finding the local texmf tree programatically
> -   using (all?) bibtex files found in any of the search paths
> -   including the directory that the file is in among the search paths
> -   better support for other bibliography database formats

*pandoc-citation-dictionary*
----------------------------

We are leaving this in for now, but now that proper completion is
working, we'll probably get rid of it. If you create a text file,
`
    ~/.pandoc/citationkeys.dict

that contains a list of citation keys, one per line, like so

    @adams1967a
    @adams1971
    @adams1972a
    @adams1974
    @adams1977
    @adams1986a

these citekeys are added to vim's dictionary, allowing for
autocompletion by typing part of a citekey, e.g.,

    @adams19

and then hitting CTRL-X CTRL-K (or via SuperTab).

*pandoc-conversion-functions*
=============================

Pandoc can be used to perform lots of different conversions. We've
made no attempt to provide functions that cover all these possibilities,
since it is easy to do something like

    :!markdown2pdf %

If there is a particular conversion that you do all the time with a
particular set of options, you might want to define a leader mapping
in your vimrc.

*PandocHtmlOpen*, *PandocPdfOpen* and *PandocOdtOpen*
-----------------------------------------------------

We currently provide three convert-and-open functions. When you run *PandocPdfOpen*, for example, the file in the current buffer is converted to PDF and then opened in your default PDF viewer. (Linux users: these commands depend on xdg-open.)

If you have defined maplocalleader in your vimrc, e.g.,

    let maplocalleader = ","

then we will define localleader mappings for each of these commands:

    <localleader>pdf
    <localleader>odt
    <localleader>html

So then you can type something like `,pdf` and a PDF version of your current buffer will be displayed.

*pandoc-tidying-functions*
==========================

The plugin defines two functions designed for tidying up your markdown:
*MarkdownTidy* and *MarkdownTidyWrap*. Running MarkdownTidyWrap is
equivalent to

    :%!pandoc -t markdown -s

Note that this can have some unexpected effects: it will replace all of
your reference link ids with implicit reference links; it will replace
all of your footnote ids with numbers; it will transform any setext
style headers into atx style headers; it will process any latex macros
you may have defined and delete the macro definitions; if your document
lacks a title block, it will add one.

The plugin also sets

    setlocal equalprg=pandoc\ -t\ markdown\ --reference-links

In practice, this makes it easy to hard-wrap paragraphs nicely, using
vim's `=` command. If you prefer soft wrapping, you might want to change
this to

    setlocal equalprg=pandoc\ -t\ markdown\ --reference-links\ --no-wrap

Note that this will *remove* any title block, as well as processing any
custom latex macros. So you might not want to `ggvG=`.

Maintainers
===========

+    [Felipe Morales](https://github.com/fmoralesc/)
+    [David Sanson](https://github.com/dsanson/) 

Thanks also to [Wei Dai][] for bug fixes and improvements.

Borrowings
==========

The syntax file derives from Jeremy Schultz's [pdc.vim][] as
githubbed by [wunki][].

The snippets file is a slight extension (and contraction) of the
markdown.snippets file that is part of many of the [vim-markdown
repositories on github][].

Autocompletion was implemented by hacking away at [LaTeX Box][]'s
implementation of bibtex citation completion, even if the results don't
look much like the original.

Known Issues
============

1. Filetype detection does not play well with [markdown-vim][].

2. Filetype detection is aggressive: we assume that if you use this plugin,
   then you want to use pandoc for you markdown needs. So we match the
   following extensions: .markdown, .md, .mkd, .pd, .pdk, .pandoc, and .text.


* * * *

  [pandoc]: http://johnmacfarlane.net/pandoc/
  [extended markdown]: http://johnmacfarlane.net/pandoc/README.html#pandocs-markdown
  [snipMate]: http://www.vim.org/scripts/script.php?script_id=2540
  [Wei Dai]: https://github.com/clvv
  [pdc.vim]: http://www.vim.org/scripts/script.php?script_id=2389
  [wunki]: https://github.com/wunki/vim-pandoc
  [vim-markdown repositories on github]: https://github.com/hallison/vim-markdown
  [LaTeX Box]: http://www.vim.org/scripts/script.php?script_id=3109
  [SuperTab]: http://www.vim.org/scripts/script.php?script_id=1643
  [FoldList]: http://www.vim.org/scripts/script.php?script_id=500
  [markdown-vim]: http://plasticboy.com/markdown-vim-mode/


 vim:tw=78:ts=8:ft=help:norl: 

