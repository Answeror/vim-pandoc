*pandoc.txt*                                        Pandoc Vim Plugin  
*pandoc*

# Vim Plugin for Pandoc

This is a bundle for writing and editing documents in [pandoc][]'s
[extended markdown][].

This documentation is only nominally formatted as a vim help file;
really it is just markdown with a few vim help file tags between
asterisks. (Someone want to write a vim-help writer module for pandoc?)

In addition to reading this help file, you might take a look at the
heavily commented ftplugin/pandoc.vim file.

## Known Gotchas

1.  Filetype detection does not play well with the [markdown-vim
    plugin][].
2.  Filetype detection is aggressive: we assume that if you use this 
    plugin, then you want to use pandoc for you markdown needs. So we 
	match the following extensions: .markdown, .md, .mkd, .pd, .pdk, 
	.pandoc, and .text.

## Maintainers

+	[Felipe Morales](https://github.com/fmoralesc/)
+	[David Sanson](https://github.com/dsanson/) 

Thanks also to [Wei Dai][] for bug fixes and improvements.

## Stuff From Elsewhere

The syntax file was originally by jeremy schultz (found [here][]) as
githubbed by [wunki][].

The snippets file, for use with [snipMate][], is a slight extension (and
contraction) of the markdown.snippets file that is part of many of the
[vim-markdown repositories on github][].

Autocompletion was implemented by hacking away at [LaTeX Box][]'s
implementation of bibtex citation completion, even if the results don't
look much like the original.

## Features

Here are some key features:

-   Applies settings to make vim a pleasant writing environment.
    -   soft word wrapping
    -   intelligent line joining
    -   pandoc-powered tidying up
    -   other little tweaks along these lines

Specifically:

    setlocal formatoptions=1
    setlocal linebreak
    nnoremap <buffer> j gj
    nnoremap <buffer> k gk
    vnoremap <buffer> j gj
    vnoremap <buffer> k gk
    setlocal display=lastline
    setlocal nojoinspaces
    setlocal commentstring=<!--%s-->
    setlocal comments=s:<!--,m:\ \ \ \ ,e:-->

Additional tweaks welcome. Feedback also welcome on whether this is
appropriate. It would be easy to make some or all of this optional.

> **TODO**: configurable switch between "soft wrap" mode and "hard
> wrap" mode.

-   Syntax highlighting with support for definition lists, numbered
    examples, delimited code blocks, LaTeX and HTML, citations,
    footnotes, ....

-   Some snippets for use with snipMate (David says: I never use these,
    so they could probably use improvement. If you improve them, let
	us know).

-   Folding of sections. (See `:help fold-commands` if you haven't used
    vim's folding before.). Quick tips:

    -   `za` toggles folds open and closed (`zA` toggles fold and all
        its children open and closed)
    -   `zc` closes a fold (`zC` closes it and all its children)
    -   `zo` opens a fold (`zO` opens it and all its children).

-   Autocompletion of citations (more details below).

-   Some simple pandoc-powered conversion and tidying functions.

ftplugin/pandoc.vim is fairly well-commented. Take a look at it to see
what it does in detail.

## Citation Autocompletion

*pandoc-citation-completion* *PandocBibfile*

If you have a bibtex file (or a symlink to a bibtex file) named
'default.bib' in one of these folders,

    ~/.pandoc
    ~/Library/texmf/bibtex/bib
    ~/texmf/bibtex/bib

then the plugin will automatically use that file for citation
autocompletion. If you define `g:PandocBibfile` in your vimrc,

    let g:PandocBibfile = '/the/path/to/your/bibtex/file.bib'

then that file will be used instead.

To use autocompletion, start typing a citekey, e.g.,

    @geac

and then, while still in insert mode, hit ctrl-x ctrl-o (vim's shortcut
for omnicompletion), and you'll get a popup window with a list of
matching keys, e.g.,

    @geach1970
    @geach1972

Regular expressions work too:

    @le.*90

should suggest both '@leftow1990' and '@lewis1990', assuming those are
both keys in your bibliography.

The plugin also provides support for using this with [SuperTab][]. You
will want something like this in your vimrc: 

    let g:SuperTabDefaultCompletionType = "context"

Then you can just hit TAB in the middle of typing a citation
to autocomplete the citation.

> **KNOWN BUGS**:
>
> -   SuperTab autocompletion of citations only works after you use ctrl-x
>     ctrl-o autocompletion once within a given file.
> -   Regular expressions don't work when using SuperTab.

> **TODO**: pandoc.vim should be smarter about finding bibliography
> files. This includes:
>
> -   finding the local texmf tree programatically
> -   using (all?) bibtex files found in any of the search paths
> -   including the directory that the file is in among the search paths
> -   better support for other bibliography database formats (the parser
>     currently works with bibtex and MODS xml files, but the script
>     doesn't look for MODS xml files)

## Dictionary-Based Citation Completions

We are leaving this in for now, but now that proper autocompletion is
working, we'll probably get rid of it. If you create a text file,

    ~/.pandoc/citationkeys.dict

that contains a list of citation keys, one per line, like so

    @adams1967a
    @adams1971
    @adams1972a
    @adams1974
    @adams1977
    @adams1986a

these citekeys are added to vim's dictionary, allowing for
autocompletion by typing part of a citekey, e.g.,

    @adams19

and then hitting ctrl-x ctrl-k (or via SuperTab).

## Conversion and Tidying Up

*MarkdownTidy* *MarkdownTidyWrap* *PandocHtmlOpen* *PandocPdfOpen*
*PandocOdtOpen*

Look at the comments in ftpugin/pandoc.vim to see what is there. We've
made no attempt to provide a complete set of commands, since it is easy
to do something like

    :!markdown2pdf %

If there is a particular conversion that you do all the time with a
particular set of options, you might want to define a leader mapping
in your vimrc.

The plugin sets

    setlocal equalprg=pandoc\ -t\ markdown\ --reference-links

In practice, this makes it easy to hard-wrap paragraphs nicely, using
vim's `=` command. If you prefer soft wrapping, you might want to change
this to

    setlocal equalprg=pandoc\ -t\ markdown\ --reference-links\ --no-wrap

Either way, there are a few gotchas to be aware of:

1.  The filter will remove pandoc's title block, if that is included in
    the chunk of filtered text.
2.  The filter will apply and remove any latex macros you might have
    defined, if they are included in the chunk of filtered text.

So keep your metadata and macros at the top of the file, and avoid
filtering them with `=`.

If you know how to work around these problems, let us know (or better,
fork and fix it).

## LocalLeader Mappings

*pandoc-local-leader-mappings* *PandocLocalLeaders*

If you define maplocalleader in your vimrc,

    let maplocalleader = ","

then the plugin will define some leader mappings for you. For example,

    <localleader>pdf
    <localleader>odt
    <localleader>html

which convert the buffer to given format and open the results.

  [pandoc]: http://johnmacfarlane.net/pandoc/
  [extended markdown]: http://johnmacfarlane.net/pandoc/README.html#pandocs-markdown
  [markdown-vim plugin]: http://plasticboy.com/markdown-vim-mode/
  [Felipe Morales]: https://github.com/fmoralesc
  [Wei Dai]: https://github.com/clvv
  [here]: http://www.vim.org/scripts/script.php?script_id=2389
  [wunki]: https://github.com/wunki/vim-pandoc
  [snipMate]: http://www.vim.org/scripts/script.php?script_id=2540
  [vim-markdown repositories on github]: https://github.com/hallison/vim-markdown
  [LaTeX Box]: http://www.vim.org/scripts/script.php?script_id=3109
  [SuperTab]: http://www.vim.org/scripts/script.php?script_id=1643
